// <auto-generated />
using System;
using Banking.Api.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Banking.Api.Migrations
{
    [DbContext(typeof(BankingContext))]
    partial class BankingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Banking.Api.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Product")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("450ffbb8-9f11-4ec6-a1e1-df48aefc82ef"),
                            Currency = "EUR",
                            Iban = "NL69INGB0123456789",
                            Name = "Hr A van Dijk , Mw B Mol-van Dijk",
                            Product = "Betaalrekening"
                        },
                        new
                        {
                            AccountId = new Guid("cbb0bc3e-a583-4e73-a2e1-d3387f84cf87"),
                            Currency = "EUR",
                            Iban = "NL77INGB0777777777",
                            Name = "George Joe",
                            Product = "Betaalrekening"
                        });
                });

            modelBuilder.Entity("Banking.Api.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Food"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Entertainment"
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Clothing"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "Medical expenses"
                        });
                });

            modelBuilder.Entity("Banking.Api.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TransactionDate");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionId = 1,
                            AccountId = new Guid("450ffbb8-9f11-4ec6-a1e1-df48aefc82ef"),
                            Amount = 1000.00m,
                            CategoryId = 1,
                            TransactionDate = new DateTimeOffset(new DateTime(2020, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            TransactionId = 2,
                            AccountId = new Guid("450ffbb8-9f11-4ec6-a1e1-df48aefc82ef"),
                            Amount = 20.00m,
                            CategoryId = 1,
                            TransactionDate = new DateTimeOffset(new DateTime(2021, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            TransactionId = 3,
                            AccountId = new Guid("450ffbb8-9f11-4ec6-a1e1-df48aefc82ef"),
                            Amount = 100.00m,
                            CategoryId = 1,
                            TransactionDate = new DateTimeOffset(new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            TransactionId = 4,
                            AccountId = new Guid("450ffbb8-9f11-4ec6-a1e1-df48aefc82ef"),
                            Amount = 50.00m,
                            CategoryId = 2,
                            TransactionDate = new DateTimeOffset(new DateTime(2021, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0))
                        },
                        new
                        {
                            TransactionId = 5,
                            AccountId = new Guid("cbb0bc3e-a583-4e73-a2e1-d3387f84cf87"),
                            Amount = 77.00m,
                            CategoryId = 1,
                            TransactionDate = new DateTimeOffset(new DateTime(2021, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 2, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Banking.Api.Entities.Transaction", b =>
                {
                    b.HasOne("Banking.Api.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Banking.Api.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Banking.Api.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
